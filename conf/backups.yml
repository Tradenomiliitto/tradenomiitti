---
- hosts: [ prod ]
  remote_user: ubuntu
  become: yes
  tasks:
    - name: setup cron job to run pg_dump
      cron:
        user: postgres
        hour: "2"
        minute: "0"
        name: dump_db
        job: pg_dump --clean tradenomiitti >/tmp/dbdump && {{ hostvars[ groups['prod'][0] ].cron_health_command_1 }}

    - name: setup cron job to tar up images
      cron:
        user: ubuntu
        hour: "2"
        minute: "0"
        name: tar_images
        job: tar czfP /tmp/images.tar.gz /srv/static/images && {{ hostvars[ groups['prod'][0] ].cron_health_command_2 }}

- hosts: qa
  remote_user: ubuntu
  become: yes
  tasks:
    - name: install pip for rotate-backups
      apt: pkg=python3-pip state=present

- hosts: qa
  remote_user: ubuntu
  become: no
  tasks:
    - name: create a new ssh key if it doesn't exist
      shell: "test -f ~/.ssh/id_rsa.pub || ssh-keygen -N '' -f .ssh/id_rsa &>/dev/null"

    - name: output the ssh public key
      shell: "cat ~/.ssh/id_rsa.pub"
      register: public_key

    - name: install rotate-backups
      pip: name=rotate-backups

    - name: setup cron to download database dump and images
      cron:
        user: ubuntu
        hour: "3"
        minute: "0"
        name: download backups
        job: scp {{ hostvars[groups['prod'][0]].server_name }}:/tmp/images.tar.gz {{ hostvars[groups['prod'][0]].server_name }}:/tmp/dbdump /home/ubuntu && mkdir -p backups/db backups/images && mv images.tar.gz backups/images/images.tar.gz.$(date '+%Y-%m-%d') && mv dbdump backups/db/dbdump.$(date '+%Y-%m-%d') && /home/ubuntu/.local/bin/rotate-backups --daily 7 --weekly 4 --monthly 6 --yearly always backups/db && /home/ubuntu/.local/bin/rotate-backups --daily 7 --weekly 4 --monthly 6 --yearly always backups/images && {{ hostvars[ groups['qa'][0] ].cron_health_command_1 }}

- hosts: [ prod ]
  remote_user: ubuntu
  tasks:
    - name: add authorized key from qa
      authorized_key:
        user: ubuntu
        state: present
        key: "{{ hostvars[ groups['qa'][0] ].public_key.stdout }}"

- hosts: [ qa ]
  remote_user: ubuntu
  tasks:
    - name: approve host key
      command: ssh -oStrictHostKeyChecking=no {{ hostvars[groups['prod'][0]].server_name }}

