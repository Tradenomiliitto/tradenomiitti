---
- hosts: [ dev, qa, prod ]
  remote_user: ubuntu
  become: yes
  tasks:
    - name: copy node repo key
      copy: src=nodesource.gpg.key dest=/var/cache/nodesource.gpg.key

    - name: install node repo key
      apt_key: file=/var/cache/nodesource.gpg.key state=present

    - name: remove old node repo
      apt_repository:
        repo: deb https://deb.nodesource.com/node_7.x xenial main
        state: absent

    - name: install node repo
      apt_repository:
        repo: deb https://deb.nodesource.com/node_8.x xenial main

    - name: install system dependencies
      apt: pkg={{item}} state=present
      with_items:
        - postgresql
        - nodejs
        - git
        - python-psycopg2
        - graphicsmagick
        - fail2ban

    - name: install nginx basic auth password file
      template: src=passwd dest=/etc/nginx/passwd
      notify:
        - restart nginx

    - name: install nginx.conf
      template: src=nginx.conf dest=/etc/nginx/nginx.conf
      notify:
        - restart nginx

    - name: Enable persistent journal
      copy: src=journald.conf dest=/etc/systemd/journald.conf
      notify:
        - restart journald

    - name: Configure email from unattended upgrades
      lineinfile:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        state: present
        insertafter: '^//Unattended-Upgrade::Mail'
        regexp: '^Unattended-Upgrade::Mail "{{unattended_upgrades_email}}";$'
        line: 'Unattended-Upgrade::Mail "{{unattended_upgrades_email}}";'
      when: unattended_upgrades_email|length > 0

    - name: Configure fail2ban
      copy: src=fail2ban-jail.local dest=/etc/fail2ban/jail.local
      notify:
        - restart fail2ban

    - name: create database user
      become_user: postgres
      postgresql_user:
        name : "{{db_user}}"
        password : "{{db_password}}"

    - name: create database
      become_user: postgres
      postgresql_db:
        name: tradenomiitti
        owner: "{{db_user}}"

    - name: ensure base services are running
      service: name={{item}} state=started enabled=yes
      with_items: [ nginx, postgresql, fail2ban ]

    # Set up deployment by git push env master
    - name: make base directories
      file: path={{item}} state=directory mode=0755 owner=ubuntu
      with_items: [ /srv, /srv/checkout ]
    - name: create bare git repo
      become: no
      command: git --bare init tradenomiitti.git
      args:
        chdir: /srv
        creates: /srv/tradenomiitti.git

    - name: do initial clone
      become: no
      command: git clone /srv/tradenomiitti.git
      args:
        chdir: /srv/checkout
        creates: /srv/checkout/tradenomiitti

    - name: add deploy hook
      copy: src=deploy.sh dest=/srv/tradenomiitti.git/hooks/post-receive mode=0755
    
    - name: create run script
      template: src=run.sh dest=/srv/run.sh mode="u=rwx,o=rx,g=rx"

    - name: disable pm2 if it exists from an older installation
      service: name={{item}} enabled=no state=stopped
      with_items: [ pm2, pm2-ubuntu ]
      ignore_errors: yes

    - name: create run service
      copy: src=tradenomiitti.service dest=/etc/systemd/system/tradenomiitti.service
      notify:
        - restart backend
    
    - name: enable backend service on boot
      service: name=tradenomiitti state=started enabled=yes

    # create folders for static files and user images
    - name: static folder creation
      file: path=/srv/static/images state=directory mode=0755 owner=ubuntu

    # upload all custom static assets (images, logos, json files etc.)
    - name: upload static assets
      copy: src={{ item }} dest=/srv/static/{{ item | basename}}
      with_fileglob:
        - "assets/*"

    - name: upload google analytics id
      template: src=google-analytics-id dest=/srv/static/google-analytics-id

  handlers:
    - name: restart nginx
      service: name=nginx state=restarted

    - name: restart backend
      service: name=tradenomiitti state=restarted

    - name: restart journald
      service: name=systemd-journald state=restarted

    - name: restart fail2ban
      service: name=fail2ban state=restarted
